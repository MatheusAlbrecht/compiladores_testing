/* Generated By:JavaCC: Do not edit this line. GrammarTest.java */
package parser;

import java.io.*;
import recovery.*;   // importa as classes de recupera��o de erros do AS


public class GrammarTest implements GrammarTestConstants {
final static String Version = "X++ Compiler - Trab Entrega 3 - 2017";
int contParseError = 0;           // contador de erros sint�ticos
boolean debug_recovery;   // controla verbose de recupera��o de erros
Token lastError = null;

//Melhor Diciplina Ever
// Define o m�todo "main" da classe GrammarTest.
  public  static void main(String args[]) throws ParseException
  {
  boolean debug_as = false;
  boolean debug_recovery = false;

    String filename = ""; // nome do arquivo a ser analisado
    GrammarTest parser;     // analisador l�xico/sint�tico
    int i;
    boolean ms = false;

    System.out.println(Version);
    // l� os par�metros passados para o compilador
    for (i = 0; i < args.length - 1; i++)
    {
        if (args[i].equals("-debug_AS") )
            debug_as = true;
        else
        if (args[i].equals("-debug_recovery") )
            debug_recovery = true;
        else
        {
            System.out.println("Usage is: java GrammarTest [-debug_AS] " +
             "[-debug_recovery] inputfile");
            System.exit(0);
        }
    }

    if (args[i].equals("-"))
    {       // l� da entrada padr�o
        System.out.println("Reading from standard input . . .");
        parser = new GrammarTest(System.in); // cria AS
     }
     else
    {       // l� do arquivo
        filename = args[args.length-1];
        System.out.println("Reading from file " + filename + " . . .");
        try {  // cria AS
            parser = new GrammarTest(new java.io.FileInputStream(filename));
        }
    catch (java.io.FileNotFoundException e) {
               System.out.println("File " + filename + " not found.");
        return;
        }
    }

    parser.debug_recovery = debug_recovery;
    if (! debug_as) parser.disable_tracing(); // desab. verbose do AS
    try {
        parser.program();   // chama o m�todo que faz a an�lise
    }
    catch (ParseEOFException e)
    {
    System.err.println(e.getMessage());
    }
    finally {
        System.out.println(parser.token_source.foundLexError() +
                                " Lexical Errors found");
        System.out.println(parser.contParseError + " Syntactic Errors found");
     }

}  // main

static public String im(int x)
{
int k;
String s;
   s = tokenImage[x];
   k = s.lastIndexOf("\u005c"");
   try {s = s.substring(1,k);}
   catch (StringIndexOutOfBoundsException e)
   {}
   return s;
}


boolean eof;    // vari�vel que indica se EOF foi alcan�ado
// o m�todo abaixo consome tokens at� alcan�ar um que perten�a ao conjunto
// de sincroniza��o

void consumeUntil(RecoverySet g,
                 ParseException e,
                 String met) throws ParseEOFException,
                                    ParseException
{
Token tok;

   if ( debug_recovery) // informa��o sobre a recupera��o
   {
       System.out.println();
       System.out.println("*** " + met + " ***");
       System.out.println("     Syncronizing Set: " + g);
   }

   if (g == null) throw e; // se o conjunto � null, propaga a exce��o

   tok = getToken(1); // pega token corrente
   while ( ! eof )  // se n�o chegou ao fim do arquivo
   {
        if ( g.contains(tok.kind ) ) //achou um token no conjunto
        {
             if ( debug_recovery)
               System.out.println("     Found syncronizing token: " +
                                   im(tok.kind));
             break;
        }
        if (debug_recovery)
             System.out.println("     Ignoring token: " + im(tok.kind));
        getNextToken();     // pega pr�ximo token
        tok = getToken(1);
        if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?
            eof = true;
    }
   if ( tok != lastError)
   {
        System.out.println(e.getMessage());
        lastError = tok;
        contParseError++;  // incrementa n�mero de erros
   }
   if ( eof ) throw new ParseEOFException("EOF found prematurely.");
}

/************************************************
 * Comments *
 ************************************************/
//TOKEN :
//{
//  < SINGLELINECOMMENTSTART : "//" >
//| < MULTILINECOMMENTSTART : "/*" >
//| < MULTILINECOMMENTEND: "*/" >
//}


/************************************************
 * Produ��es *
 ************************************************/
  final public void read_Program() throws ParseException {
    trace_call("read_Program");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        classlist();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      jj_consume_token(0);
    } finally {
      trace_return("read_Program");
    }
  }

  final public void ident() throws ParseException {
    trace_call("ident");
    try {
      jj_consume_token(IDENTIFIER);
    } finally {
      trace_return("ident");
    }
  }

  final public void primitivetype() throws ParseException {
    trace_call("primitivetype");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
        break;
      case CHAR:
        jj_consume_token(CHAR);
        break;
      case INT:
        jj_consume_token(INT);
        break;
      case FLOAT:
        jj_consume_token(FLOAT);
        break;
      case DOUBLE:
        jj_consume_token(DOUBLE);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("primitivetype");
    }
  }

  final public void classlist() throws ParseException {
    trace_call("classlist");
    try {
      classdecl();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        classlist();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
    } finally {
      trace_return("classlist");
    }
  }

  final public void classdecl() throws ParseException {
    trace_call("classdecl");
    try {
      jj_consume_token(CLASS);
      ident();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        ident();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      classbody();
    } finally {
      trace_return("classdecl");
    }
  }

  final public void classbody() throws ParseException {
    trace_call("classbody");
    try {
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        classlist();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_1;
        }
        vardecl();
        jj_consume_token(SEMICOLON);
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTRUCTOR:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_2;
        }
        constructdecl();
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_3;
        }
        methoddecl();
      }
      jj_consume_token(RBRACE);
    } finally {
      trace_return("classbody");
    }
  }

  final public void vardecl() throws ParseException {
    trace_call("vardecl");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
        primitivetype();
        break;
      case IDENTIFIER:
        ident();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ident();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        ident();
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_6;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
        }
      }
    } finally {
      trace_return("vardecl");
    }
  }

  final public void constructdecl() throws ParseException {
    trace_call("constructdecl");
    try {
      jj_consume_token(CONSTRUCTOR);
      methodbody();
    } finally {
      trace_return("constructdecl");
    }
  }

  final public void methoddecl() throws ParseException {
    trace_call("methoddecl");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
        primitivetype();
        break;
      case IDENTIFIER:
        ident();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_7;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
      ident();
      methodbody();
    } finally {
      trace_return("methoddecl");
    }
  }

  final public void methodbody() throws ParseException {
    trace_call("methodbody");
    try {
      jj_consume_token(LPAREN);
      paramlist();
      jj_consume_token(RPAREN);
      statement();
    } finally {
      trace_return("methodbody");
    }
  }

  final public void paramlist() throws ParseException {
    trace_call("paramlist");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
          primitivetype();
          break;
        case IDENTIFIER:
          ident();
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        ident();
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[15] = jj_gen;
            break label_8;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
        }
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[16] = jj_gen;
            break label_9;
          }
          jj_consume_token(COMMA);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case CHAR:
          case DOUBLE:
          case FLOAT:
          case INT:
            primitivetype();
            break;
          case IDENTIFIER:
            ident();
            break;
          default:
            jj_la1[17] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          ident();
          label_10:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              ;
              break;
            default:
              jj_la1[18] = jj_gen;
              break label_10;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
          }
        }
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
    } finally {
      trace_return("paramlist");
    }
  }

  final public void statement() throws ParseException {
    trace_call("statement");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case IDENTIFIER:
        vardecl();
        jj_consume_token(SEMICOLON);
        break;
        atribStat();
        jj_consume_token(SEMICOLON);
        break;
      case PRINT:
        printStat();
        jj_consume_token(SEMICOLON);
        break;
      case READ:
        readStat();
        jj_consume_token(SEMICOLON);
        break;
      case RETURN:
        returnStat();
        jj_consume_token(SEMICOLON);
        break;
      case SUPER:
        superStat();
        jj_consume_token(SEMICOLON);
        break;
      case IF:
        ifStat();
        break;
      case FOR:
        forStat();
        break;
      case WHILE:
        whileStat();
        break;
      case DO:
        doWhileStat();
        jj_consume_token(SEMICOLON);
        break;
      case SWITCH:
        switchStat();
        break;
      case LBRACE:
        jj_consume_token(LBRACE);
        statlist();
        jj_consume_token(RBRACE);
        break;
      case BREAK:
        jj_consume_token(BREAK);
        jj_consume_token(SEMICOLON);
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("statement");
    }
  }

  final public void statlist() throws ParseException {
    trace_call("statlist");
    try {
      statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BREAK:
      case CHAR:
      case DO:
      case DOUBLE:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case PRINT:
      case READ:
      case RETURN:
      case SUPER:
      case SWITCH:
      case WHILE:
      case IDENTIFIER:
      case LBRACE:
      case SEMICOLON:
        statlist();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
    } finally {
      trace_return("statlist");
    }
  }

  final public void atribStat() throws ParseException {
    trace_call("atribStat");
    try {
      lvalue();
      jj_consume_token(EQUALS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case int_constant:
      case string_constant:
      case null_constant:
      case IDENTIFIER:
      case LPAREN:
        expression();
        break;
      case NEW:
        alocexpression();
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("atribStat");
    }
  }

  final public void printStat() throws ParseException {
    trace_call("printStat");
    try {
      jj_consume_token(PRINT);
      expression();
    } finally {
      trace_return("printStat");
    }
  }

  final public void readStat() throws ParseException {
    trace_call("readStat");
    try {
      jj_consume_token(READ);
      lvalue();
    } finally {
      trace_return("readStat");
    }
  }

  final public void returnStat() throws ParseException {
    trace_call("returnStat");
    try {
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case int_constant:
      case string_constant:
      case null_constant:
      case IDENTIFIER:
      case LPAREN:
        expression();
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
    } finally {
      trace_return("returnStat");
    }
  }

  final public void superStat() throws ParseException {
    trace_call("superStat");
    try {
      jj_consume_token(SUPER);
      jj_consume_token(LPAREN);
      arglist();
      jj_consume_token(RPAREN);
    } finally {
      trace_return("superStat");
    }
  }

  final public void ifStat() throws ParseException {
    trace_call("ifStat");
    try {
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
      statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        statement();
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
    } finally {
      trace_return("ifStat");
    }
  }

  final public void forStat() throws ParseException {
    trace_call("forStat");
    try {
      jj_consume_token(FOR);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        atribStat();
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case int_constant:
      case string_constant:
      case null_constant:
      case IDENTIFIER:
      case LPAREN:
        expression();
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        atribStat();
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      statement();
    } finally {
      trace_return("forStat");
    }
  }

  final public void arglist() throws ParseException {
    trace_call("arglist");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case int_constant:
      case string_constant:
      case null_constant:
      case IDENTIFIER:
      case LPAREN:
        expression();
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[28] = jj_gen;
            break label_11;
          }
          jj_consume_token(COMMA);
          expression();
        }
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
    } finally {
      trace_return("arglist");
    }
  }

  final public void lvalue() throws ParseException {
    trace_call("lvalue");
    try {
      ident();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
        case DOT:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          jj_consume_token(LBRACKET);
          expression();
          jj_consume_token(RBRACKET);
          break;
        case DOT:
          jj_consume_token(DOT);
          ident();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAREN:
            jj_consume_token(LPAREN);
            arglist();
            jj_consume_token(RPAREN);
            break;
          default:
            jj_la1[31] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("lvalue");
    }
  }

  final public void alocexpression() throws ParseException {
    trace_call("alocexpression");
    try {
      jj_consume_token(NEW);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ident();
        jj_consume_token(LPAREN);
        arglist();
        jj_consume_token(RPAREN);
        break;
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
          primitivetype();
          break;
        case IDENTIFIER:
          ident();
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(LBRACKET);
        expression();
        jj_consume_token(RBRACKET);
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[34] = jj_gen;
            break label_13;
          }
          jj_consume_token(LBRACKET);
          expression();
          jj_consume_token(RBRACKET);
        }
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("alocexpression");
    }
  }

  final public void expression() throws ParseException {
    trace_call("expression");
    try {
      numexpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
      case NOT:
      case LESSTHEN:
      case GRTTHEN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LESSTHEN:
          jj_consume_token(LESSTHEN);
          break;
        case GRTTHEN:
          jj_consume_token(GRTTHEN);
          break;
          jj_consume_token(LESSTHEN);
          jj_consume_token(EQUALS);
          break;
          jj_consume_token(GRTTHEN);
          jj_consume_token(EQUALS);
          break;
        case EQUALS:
          jj_consume_token(EQUALS);
          jj_consume_token(EQUALS);
          break;
        case NOT:
          jj_consume_token(NOT);
          jj_consume_token(EQUALS);
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        numexpr();
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
    } finally {
      trace_return("expression");
    }
  }

  final public void numexpr() throws ParseException {
    trace_call("numexpr");
    try {
      term();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[38] = jj_gen;
          break label_14;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        term();
      }
    } finally {
      trace_return("numexpr");
    }
  }

  final public void term() throws ParseException {
    trace_call("term");
    try {
      unaryexpr();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
        case DIVIDE:
        case QUOCIENT:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_15;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
          jj_consume_token(MULTIPLY);
          break;
        case DIVIDE:
          jj_consume_token(DIVIDE);
          break;
        case QUOCIENT:
          jj_consume_token(QUOCIENT);
          break;
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        unaryexpr();
      }
    } finally {
      trace_return("term");
    }
  }

  final public void unaryexpr() throws ParseException {
    trace_call("unaryexpr");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
      factor();
    } finally {
      trace_return("unaryexpr");
    }
  }

  final public void factor() throws ParseException {
    trace_call("factor");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case int_constant:
        jj_consume_token(int_constant);
        break;
      case string_constant:
        jj_consume_token(string_constant);
        break;
      case null_constant:
        jj_consume_token(null_constant);
        break;
      case IDENTIFIER:
        lvalue();
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        expression();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("factor");
    }
  }

  final public void whileStat() throws ParseException {
    trace_call("whileStat");
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
      statement();
    } finally {
      trace_return("whileStat");
    }
  }

  final public void doWhileStat() throws ParseException {
    trace_call("doWhileStat");
    try {
      jj_consume_token(DO);
      statement();
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
    } finally {
      trace_return("doWhileStat");
    }
  }

  final public void switchStat() throws ParseException {
    trace_call("switchStat");
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(LPAREN);
      ident();
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case DEFAULTCASE:
        switchCasesStat();
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
    } finally {
      trace_return("switchStat");
    }
  }

  final public void switchCasesStat() throws ParseException {
    trace_call("switchCasesStat");
    try {
      switchCaseStat();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case DEFAULTCASE:
        switchCasesStat();
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
    } finally {
      trace_return("switchCasesStat");
    }
  }

  final public void switchCaseStat() throws ParseException {
    trace_call("switchCaseStat");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        jj_consume_token(CASE);
        factor();
        break;
      case DEFAULTCASE:
        jj_consume_token(DEFAULTCASE);
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(DOUBLEDOT);
      jj_consume_token(DOUBLEDOT);
      statement();
    } finally {
      trace_return("switchCaseStat");
    }
  }

//void lineComment() :
//{}
//{
//	"//" ( < string_constant > | < int_constant > )*
//}
//
//void blockComment() :
//{}
//{
//	"/*" ( < string_constant > | < int_constant > )* "*/"
//}
  final public void intLiteral() throws ParseException {
    trace_call("intLiteral");
    try {
      jj_consume_token(int_constant);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case int_constant:
          ;
          break;
        default:
          jj_la1[48] = jj_gen;
          break label_16;
        }
        jj_consume_token(int_constant);
      }
    } finally {
      trace_return("intLiteral");
    }
  }

  final public void floatLiteral() throws ParseException {
    trace_call("floatLiteral");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case int_constant:
        intLiteral();
        jj_consume_token(DOT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case int_constant:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case int_constant:
            intLiteral();
            break;
            intLiteral();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 64:
            case 65:
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 64:
                jj_consume_token(64);
                break;
              case 65:
                jj_consume_token(65);
                break;
              default:
                jj_la1[49] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
            default:
              jj_la1[50] = jj_gen;
              ;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case MINUS:
              jj_consume_token(MINUS);
              break;
            default:
              jj_la1[51] = jj_gen;
              ;
            }
            intLiteral();
            break;
          default:
            jj_la1[52] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[53] = jj_gen;
          ;
        }
        break;
      case DOT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case int_constant:
          intLiteral();
          break;
        default:
          jj_la1[54] = jj_gen;
          ;
        }
        jj_consume_token(DOT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case int_constant:
          intLiteral();
          break;
          intLiteral();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 64:
          case 65:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 64:
              jj_consume_token(64);
              break;
            case 65:
              jj_consume_token(65);
              break;
            default:
              jj_la1[55] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[56] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MINUS:
            jj_consume_token(MINUS);
            break;
          default:
            jj_la1[57] = jj_gen;
            ;
          }
          intLiteral();
          break;
        default:
          jj_la1[58] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("floatLiteral");
    }
  }

  final public void stringLiteral() throws ParseException {
    trace_call("stringLiteral");
    try {
      jj_consume_token(66);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case int_constant:
        case string_constant:
          ;
          break;
        default:
          jj_la1[60] = jj_gen;
          break label_17;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case string_constant:
          jj_consume_token(string_constant);
          break;
        case int_constant:
          jj_consume_token(int_constant);
          break;
        default:
          jj_la1[61] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(66);
    } finally {
      trace_return("stringLiteral");
    }
  }

  /** Generated Token Manager. */
  public GrammarTestTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[62];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8000,0x8884800,0x8000,0x200000,0x8000,0x8884800,0x10000,0x8884800,0x8884800,0x0,0x0,0x0,0x8884800,0x0,0x8884800,0x0,0x0,0x8884800,0x0,0x8884800,0xcb8c5800,0xcb8c5800,0x20000000,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8884800,0x0,0x8884800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x22000,0x22000,0x22000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x80000,0x80000,0x4000000,0x40000000,0x4000000,0x80000,0x4000000,0x80000,0x4000000,0x40000000,0x80000,0x4000000,0x80000,0x2108004b,0x2108004b,0x4f0180,0x4f0180,0x0,0x80000,0x4f0180,0x80000,0x40000000,0x4f0180,0x84000000,0x400000,0x84000000,0x80000,0x4000000,0x80000,0xf000,0xf000,0x180,0x180,0xe00,0xe00,0x180,0x180,0x4f0000,0x0,0x0,0x0,0x10000,0x0,0x0,0x100,0x10000,0x10000,0x10000,0x0,0x0,0x100,0x10000,0x80010000,0x30000,0x30000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x0,0x0,0x0,0x0,0x3,0x3,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public GrammarTest(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public GrammarTest(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GrammarTestTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public GrammarTest(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GrammarTestTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public GrammarTest(GrammarTestTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(GrammarTestTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[67];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 62; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 67; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
