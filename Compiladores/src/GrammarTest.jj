/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options {
  STATIC = false;
  DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(GrammarTest)
package parser;

import java.io.*;
import recovery.*;   // importa as classes de recuperação de erros do AS
 

public class GrammarTest {
final static String Version = "X++ Compiler - Trab Entrega 3 - 2017";
int contParseError = 0;           // contador de erros sintáticos
boolean debug_recovery;   // controla verbose de recuperação de erros
Token lastError = null;


// Define o método "main" da classe GrammarTest.  
  public  static void main(String args[]) throws ParseException 
  {
  boolean debug_as = false;
  boolean debug_recovery = false;

    String filename = ""; // nome do arquivo a ser analisado
    GrammarTest parser;     // analisador léxico/sintático
    int i;
    boolean ms = false;

    System.out.println(Version);
    // lê os parâmetros passados para o compilador
    for (i = 0; i < args.length - 1; i++)
    {
        if (args[i].equals("-debug_AS") )
            debug_as = true;
        else
        if (args[i].equals("-debug_recovery") )
            debug_recovery = true;
        else
        {
            System.out.println("Usage is: java GrammarTest [-debug_AS] " +
             "[-debug_recovery] inputfile");
            System.exit(0);
        }
    }

    if (args[i].equals("-"))
    {       // lê da entrada padrão      
        System.out.println("Reading from standard input . . .");
        parser = new GrammarTest(System.in); // cria AS
     }
     else 
    {       // lê do arquivo
        filename = args[args.length-1];  
        System.out.println("Reading from file " + filename + " . . .");
        try {  // cria AS
            parser = new GrammarTest(new java.io.FileInputStream(filename));
        } 
    catch (java.io.FileNotFoundException e) {
               System.out.println("File " + filename + " not found.");
        return;
        }
    } 

    parser.debug_recovery = debug_recovery;
    if (! debug_as) parser.disable_tracing(); // desab. verbose do AS
    try {
        parser.program();   // chama o método que faz a análise
    }
    catch (ParseEOFException e)
    {
    System.err.println(e.getMessage());
    }
    finally {
        System.out.println(parser.token_source.foundLexError() +
                                " Lexical Errors found");
        System.out.println(parser.contParseError + " Syntactic Errors found");
     }

}  // main

static public String im(int x)
{
int k;
String s;
   s = tokenImage[x];
   k = s.lastIndexOf("\"");
   try {s = s.substring(1,k);}
   catch (StringIndexOutOfBoundsException e)
   {}
   return s;
}


boolean eof;    // variável que indica se EOF foi alcançado
// o método abaixo consome tokens até alcançar um que pertença ao conjunto
// de sincronização

void consumeUntil(RecoverySet g,
                 ParseException e,
                 String met) throws ParseEOFException,
                                    ParseException
{
Token tok;

   if ( debug_recovery) // informação sobre a recuperação
   {
       System.out.println();
       System.out.println("*** " + met + " ***");
       System.out.println("     Syncronizing Set: " + g);
   }

   if (g == null) throw e; // se o conjunto é null, propaga a exceção

   tok = getToken(1); // pega token corrente
   while ( ! eof )  // se não chegou ao fim do arquivo
   {
        if ( g.contains(tok.kind ) ) //achou um token no conjunto
        {
             if ( debug_recovery)
               System.out.println("     Found syncronizing token: " + 
                                   im(tok.kind));
             break;
        }
        if (debug_recovery)
             System.out.println("     Ignoring token: " + im(tok.kind));
        getNextToken();     // pega próximo token       
        tok = getToken(1);
        if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?   
            eof = true;
    }
   if ( tok != lastError)
   {
        System.out.println(e.getMessage());
        lastError = tok;
        contParseError++;  // incrementa número de erros
   }
   if ( eof ) throw new ParseEOFException("EOF found prematurely.");
}

}  // GrammarTest

PARSER_END(GrammarTest)

TOKEN_MGR_DECLS :
{
int countLexError = 0;

public int foundLexError()
{
   return countLexError;
}

}SKIP :{  " "| "\r"| "\t"| "\n"}

SKIP :
{
  "/*" : multilinecomment
}

SKIP :
{
  "//" : singlelinecomment
}

<multilinecomment> SKIP:
{
   "*/" : DEFAULT
|  <~[]>
}

<singlelinecomment> SKIP:
{
   <["\n","\r"]> : DEFAULT
|   <~[]>
}


/************************************************
 * Palavras Reservadas *
 ************************************************/

TOKEN:
{ 
  < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < CASE: "case" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONSTRUCTOR : "constructor">
| < DEFAULTCASE : "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FLOAT: "float" >
| < FOR: "for" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < NEW : "new" >
| < PRINT : "print" >
| < READ : "read" >
| < RETURN: "return" >
| < SUPER: "super" >
| < STRING: "string" >
| < SWITCH: "switch" >
| < TRUE: "true" >
| < TRY: "try" >
| < WHILE: "while" > 
}


/************************************************
 * OPERATORS *
 ************************************************/
TOKEN : {  < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >
| < QUOCIENT: "%" >
| < EQUALS : "=" >
| < NOT : "!" >
| < LESSTHEN : "<" >
| < GRTTHEN : " >" >}
/************************************************
 * Constantes *
 ************************************************/

/* constantes */

TOKEN :
{
  < int_constant:  // números 
  	(["0"-"9"] (["0"-"9"])* ) >
|
  < string_constant:    // constante string como "abcd bcda"
    "\""( ~["\"","\n","\r"])* "\"" >
|
  < null_constant: "null" > // constante null
}


TOKEN :
{  
	< IDENTIFIER: <charac> (<charac>|<numb> | "_")* >
	| 
	< #charac: ( ["a"-"z"] | ["A"-"Z"])+ >
	| 
	< #numb : ( [ "0"-"9" ] )+ >
}

/************************************************
 * SEPARATORS *
 ************************************************/

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < DOUBLEDOT : ":">
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}


/************************************************
 * Comments *
 ************************************************/
//TOKEN :
//{  
//  < SINGLELINECOMMENTSTART : "//" >
//| < MULTILINECOMMENTSTART : "/*" >
//| < MULTILINECOMMENTEND: "*/" >
//}


/************************************************
 * Produções *
 ************************************************/void read_Program() :
{}
{
  (classlist())?
  <EOF>}

void ident() :
{}
{
	 < IDENTIFIER > 
}

void primitivetype() :
{}
{
  < BOOLEAN >
|
  < CHAR >
|
  < INT >
|
  < FLOAT >
|
 < DOUBLE >
}

void classlist() :
{}
{ 	classdecl()
	(classlist())?
}

void classdecl():
{}
{
  < CLASS > ident() (< EXTENDS > ident() )? classbody()
}

void classbody() :
{}
{
  < LBRACE > (classlist())? ( vardecl() < SEMICOLON > )* (constructdecl())* (methoddecl())* < RBRACE >
}

void vardecl() :
{}
{
  ( primitivetype() | ident() ) ident() ( < LBRACKET > <RBRACKET > )* ( < COMMA > ident() ( < LBRACKET > < RBRACKET > )* )*
}

void constructdecl() :
{}
{
  < CONSTRUCTOR > methodbody()
}

void methoddecl() :
{}
{
  ( primitivetype() | ident() ) ( < LBRACKET > < RBRACKET > )* ident() methodbody()
}

void methodbody() :
{}
{
  < LPAREN > paramlist() < RPAREN > statement()
}

void paramlist() :
{}
{
  ( ( primitivetype() | ident() ) ident() ( < LBRACKET > < RBRACKET > )* ( < COMMA > ( primitivetype() | ident() ) ident() ( < LBRACKET > < RBRACKET >  )* )* )?
}

void statement() :
{}
{
     vardecl() < SEMICOLON >
   | atribStat() < SEMICOLON >
   | printStat() < SEMICOLON >
   | readStat() < SEMICOLON >
   | returnStat()< SEMICOLON >
   | superStat()< SEMICOLON >
   | ifStat()
   | forStat()
   | whileStat()
   | doWhileStat() < SEMICOLON >
   | switchStat()
   | < LBRACE > statlist() < RBRACE >
   | < BREAK >< SEMICOLON >
   | < SEMICOLON >
}

void statlist() :
{}
{
  statement() (statlist())?
}

void atribStat() :
{}
{
   lvalue() < EQUALS > ( expression() | alocexpression() )
}

void printStat() :
{}
{
  < PRINT > expression()
}

void readStat() :
{}
{
   < READ > lvalue()
}

void returnStat() :
{}
{
  < RETURN > (expression())?
}

void superStat() :
{}
{
  < SUPER > < LPAREN > arglist() < RPAREN >
}

void ifStat() :
{}
{
  < IF > < LPAREN > expression()  < RPAREN > statement() ( < ELSE > statement() )?
}

void forStat() :
{}
{
  < FOR > < LPAREN > (atribStat())? < SEMICOLON > (expression())? < SEMICOLON > (atribStat())? < RPAREN > statement()
}

void arglist() :
{}
{
  ( expression() ( < COMMA > expression() )* )?
}

void lvalue() :
{}
{
  ident() ( < LBRACKET > expression() < RBRACKET > | < DOT > ident() ( < LPAREN > arglist() < RPAREN > )? )*
}

void alocexpression() :
{}
{
  < NEW > ( ident() < LPAREN > arglist() < RPAREN > | ( primitivetype() | ident() ) < LBRACKET > expression() < RBRACKET > ( < LBRACKET > expression() < RBRACKET > )* )
}

void expression() :
{}
{
	numexpr() ( ( < LESSTHEN > | < GRTTHEN > | < LESSTHEN >< EQUALS > | < GRTTHEN >< EQUALS > |< EQUALS >< EQUALS > | < NOT >< EQUALS > ) numexpr() )?
}

void numexpr() :
{}
{
	term() ( ( < PLUS > | < MINUS > ) term() )*
}

void term() :
{}
{
 	unaryexpr() ( ( < MULTIPLY > | < DIVIDE > | < QUOCIENT > ) unaryexpr() )*
}

void unaryexpr() :
{}
{
	( < PLUS > | < MINUS > )? factor()
}

void factor() :
{}
{
	 < int_constant >
   | < string_constant > 
   | < null_constant >
   | lvalue()
   | < LPAREN > expression() < RPAREN >
}

void whileStat() :
{}
{
	< WHILE > < LPAREN > expression() < RPAREN > statement()
}

void doWhileStat() :
{}
{
	< DO > statement() < LPAREN > expression() < RPAREN >
}

void switchStat() :
{}
{
	< SWITCH > < LPAREN > ident() < RPAREN > < LBRACE > (switchCasesStat())? < LBRACE >
}

void switchCasesStat() :
{}
{
	switchCaseStat() (switchCasesStat())?
}

void switchCaseStat() :
{}
{
	( < CASE > factor() |< DEFAULTCASE > ) < DOUBLEDOT > < DOUBLEDOT > statement()
}

//void lineComment() :
//{}
//{
//	"//" ( < string_constant > | < int_constant > )*
//}
//
//void blockComment() :
//{}
//{
//	"/*" ( < string_constant > | < int_constant > )* "*/"
//}

void intLiteral() :
{}
{
	< int_constant >(<int_constant >)*
}

void floatLiteral() :
{}
{
	intLiteral() < DOT > ( intLiteral() | intLiteral() ( "e" | "E" )? (< MINUS >)? intLiteral() )?
           | (intLiteral())? < DOT > ( intLiteral() | intLiteral() ( "e" | "E" )? (< MINUS >)? intLiteral() )
}

void stringLiteral() :
{}
{
	"\"" ( < string_constant > | < int_constant > )* "\""
}
 


  



